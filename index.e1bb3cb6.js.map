{"mappings":"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","sources":["<anon>","js/index.js","../../.yarn/berry/cache/camelcase-npm-8.0.0-a3fa03dcc3-10c0.zip/node_modules/camelcase/index.js","js/grid.js","js/grid.module.less"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nconst $517cf85470006f06$var$UPPERCASE = /[\\p{Lu}]/u;\nconst $517cf85470006f06$var$LOWERCASE = /[\\p{Ll}]/u;\nconst $517cf85470006f06$var$LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst $517cf85470006f06$var$IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst $517cf85470006f06$var$SEPARATORS = /[_.\\- ]+/;\nconst $517cf85470006f06$var$LEADING_SEPARATORS = new RegExp('^' + $517cf85470006f06$var$SEPARATORS.source);\nconst $517cf85470006f06$var$SEPARATORS_AND_IDENTIFIER = new RegExp($517cf85470006f06$var$SEPARATORS.source + $517cf85470006f06$var$IDENTIFIER.source, 'gu');\nconst $517cf85470006f06$var$NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + $517cf85470006f06$var$IDENTIFIER.source, 'gu');\nconst $517cf85470006f06$var$preserveCamelCase = (string, toLowerCase, toUpperCase, preserveConsecutiveUppercase)=>{\n    let isLastCharLower = false;\n    let isLastCharUpper = false;\n    let isLastLastCharUpper = false;\n    let isLastLastCharPreserved = false;\n    for(let index = 0; index < string.length; index++){\n        const character = string[index];\n        isLastLastCharPreserved = index > 2 ? string[index - 3] === '-' : true;\n        if (isLastCharLower && $517cf85470006f06$var$UPPERCASE.test(character)) {\n            string = string.slice(0, index) + '-' + string.slice(index);\n            isLastCharLower = false;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = true;\n            index++;\n        } else if (isLastCharUpper && isLastLastCharUpper && $517cf85470006f06$var$LOWERCASE.test(character) && (!isLastLastCharPreserved || preserveConsecutiveUppercase)) {\n            string = string.slice(0, index - 1) + '-' + string.slice(index - 1);\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = false;\n            isLastCharLower = true;\n        } else {\n            isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n        }\n    }\n    return string;\n};\nconst $517cf85470006f06$var$preserveConsecutiveUppercase = (input, toLowerCase)=>{\n    $517cf85470006f06$var$LEADING_CAPITAL.lastIndex = 0;\n    return input.replaceAll($517cf85470006f06$var$LEADING_CAPITAL, (match)=>toLowerCase(match));\n};\nconst $517cf85470006f06$var$postProcess = (input, toUpperCase)=>{\n    $517cf85470006f06$var$SEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n    $517cf85470006f06$var$NUMBERS_AND_IDENTIFIER.lastIndex = 0;\n    return input.replaceAll($517cf85470006f06$var$NUMBERS_AND_IDENTIFIER, (match, pattern, offset)=>[\n            '_',\n            '-'\n        ].includes(input.charAt(offset + match.length)) ? match : toUpperCase(match)).replaceAll($517cf85470006f06$var$SEPARATORS_AND_IDENTIFIER, (_, identifier)=>toUpperCase(identifier));\n};\nfunction $517cf85470006f06$export$2e2bcd8739ae039(input, options) {\n    if (!(typeof input === 'string' || Array.isArray(input))) throw new TypeError('Expected the input to be `string | string[]`');\n    options = {\n        pascalCase: false,\n        preserveConsecutiveUppercase: false,\n        ...options\n    };\n    if (Array.isArray(input)) input = input.map((x)=>x.trim()).filter((x)=>x.length).join('-');\n    else input = input.trim();\n    if (input.length === 0) return '';\n    const toLowerCase = options.locale === false ? (string)=>string.toLowerCase() : (string)=>string.toLocaleLowerCase(options.locale);\n    const toUpperCase = options.locale === false ? (string)=>string.toUpperCase() : (string)=>string.toLocaleUpperCase(options.locale);\n    if (input.length === 1) {\n        if ($517cf85470006f06$var$SEPARATORS.test(input)) return '';\n        return options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n    }\n    const hasUpperCase = input !== toLowerCase(input);\n    if (hasUpperCase) input = $517cf85470006f06$var$preserveCamelCase(input, toLowerCase, toUpperCase, options.preserveConsecutiveUppercase);\n    input = input.replace($517cf85470006f06$var$LEADING_SEPARATORS, '');\n    input = options.preserveConsecutiveUppercase ? $517cf85470006f06$var$preserveConsecutiveUppercase(input, toLowerCase) : toLowerCase(input);\n    if (options.pascalCase) input = toUpperCase(input.charAt(0)) + input.slice(1);\n    return $517cf85470006f06$var$postProcess(input, toUpperCase);\n}\n\n\nvar $c1ea9419276ef279$exports = {};\n\n$parcel$export($c1ea9419276ef279$exports, \"grid\", () => $c1ea9419276ef279$export$85fc379452d91af0, (v) => $c1ea9419276ef279$export$85fc379452d91af0 = v);\n$parcel$export($c1ea9419276ef279$exports, \"grid_visible\", () => $c1ea9419276ef279$export$c8d1057e3f32bd34, (v) => $c1ea9419276ef279$export$c8d1057e3f32bd34 = v);\nvar $c1ea9419276ef279$export$85fc379452d91af0;\nvar $c1ea9419276ef279$export$c8d1057e3f32bd34;\n$c1ea9419276ef279$export$85fc379452d91af0 = `ALARbG_grid`;\n$c1ea9419276ef279$export$c8d1057e3f32bd34 = `ALARbG_grid_visible`;\n\n\nconst $446084b9d1705d4e$export$e8e3d04e52695424 = ()=>{\n    const grid = document.createElement('div');\n    grid.className = (0, (/*@__PURE__*/$parcel$interopDefault($c1ea9419276ef279$exports))).grid;\n    document.body.appendChild(grid);\n    document.addEventListener('keydown', (event)=>{\n        if (event.ctrlKey && event.code === 'KeyG') {\n            grid.classList.toggle((0, (/*@__PURE__*/$parcel$interopDefault($c1ea9419276ef279$exports))).grid_visible);\n            console.log([\n                ...grid.classList\n            ]);\n        }\n    });\n};\n\n\n(0, $446084b9d1705d4e$export$e8e3d04e52695424)();\nconsole.log((0, $517cf85470006f06$export$2e2bcd8739ae039)('foo-bar'));\n\n\n//# sourceMappingURL=index.e1bb3cb6.js.map\n","import camelCase from 'camelcase';\n\nimport { addGrid } from './grid.js';\n\naddGrid();\n\nconsole.log(camelCase('foo-bar'));\n","const UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase, preserveConsecutiveUppercase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\tlet isLastLastCharPreserved = false;\n\n\tfor (let index = 0; index < string.length; index++) {\n\t\tconst character = string[index];\n\t\tisLastLastCharPreserved = index > 2 ? string[index - 3] === '-' : true;\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, index) + '-' + string.slice(index);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\tindex++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character) && (!isLastLastCharPreserved || preserveConsecutiveUppercase)) {\n\t\t\tstring = string.slice(0, index - 1) + '-' + string.slice(index - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replaceAll(LEADING_CAPITAL, match => toLowerCase(match));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input\n\t\t.replaceAll(NUMBERS_AND_IDENTIFIER, (match, pattern, offset) => ['_', '-'].includes(input.charAt(offset + match.length)) ? match : toUpperCase(match))\n\t\t.replaceAll(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier));\n};\n\nexport default function camelCase(input, options) {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options,\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false\n\t\t? string => string.toLowerCase()\n\t\t: string => string.toLocaleLowerCase(options.locale);\n\n\tconst toUpperCase = options.locale === false\n\t\t? string => string.toUpperCase()\n\t\t: string => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\tif (SEPARATORS.test(input)) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase, options.preserveConsecutiveUppercase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\tinput = options.preserveConsecutiveUppercase ? preserveConsecutiveUppercase(input, toLowerCase) : toLowerCase(input);\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n}\n","import styles from './grid.module.less';\n\nexport const addGrid = () => {\n    const grid = document.createElement('div');\n    grid.className = styles.grid;\n    document.body.appendChild(grid);\n\n    document.addEventListener('keydown', (event) => {\n        if (event.ctrlKey && event.code === 'KeyG') {\n            grid.classList.toggle(styles.grid_visible);\n            console.log([...grid.classList]);\n        }\n    });\n}\n","@column-width-s: 50%;\n@column-width-m: 120px;\n@column-width-l: 80px;\n\n@column-padding-s: 5px;\n@column-padding-m: 15px;\n@column-padding-l: 15px;\n\n@screen-gt-s: ~'(min-width: 768px)';\n@screen-gt-m: ~'(min-width: 1000px)';\n\n@screen-only-s: ~'(max-width: 767px)';\n@screen-only-m: ~'(min-width: 768px) and (max-width: 999px)';\n@screen-only-l: ~'(min-width: 1000px)';\n\n.grid {\n    background-image: linear-gradient(to right, transparent @column-padding-s * 2, rgba(255, 0, 0, 0.1) 1px);\n    background-size: calc(@column-width-s + @column-padding-s);\n    background-position: -10px 0;\n    position: fixed;\n    z-index: 9999;\n    top: 0;\n    bottom: 0;\n    left: 15px;\n    right: 15px;\n    display: none;\n    pointer-events: none;\n\n    @media @screen-only-s {\n        margin: 0 auto;\n    }\n\n    @media @screen-gt-s {\n        background-image: linear-gradient(to right, transparent @column-padding-m * 2, rgba(255, 0, 0, 0.1) 1px);\n        background-size: @column-width-m auto;\n        background-position: -@column-padding-m 0;\n        width: @column-width-m * 6;\n        left: 50%;\n        right: auto;\n        transform: translateX(-50%);\n    }\n\n    @media @screen-gt-m {\n        background-size: @column-width-l auto;\n        width: @column-width-l * 12;\n    }\n}\n\n.grid_visible {\n    display: block;\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$517cf85470006f06$var$UPPERCASE","$517cf85470006f06$var$LOWERCASE","$517cf85470006f06$var$LEADING_CAPITAL","$517cf85470006f06$var$IDENTIFIER","$517cf85470006f06$var$SEPARATORS","$517cf85470006f06$var$LEADING_SEPARATORS","RegExp","source","$517cf85470006f06$var$SEPARATORS_AND_IDENTIFIER","$517cf85470006f06$var$NUMBERS_AND_IDENTIFIER","$517cf85470006f06$var$preserveCamelCase","string","toLowerCase","toUpperCase","preserveConsecutiveUppercase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","isLastLastCharPreserved","index","length","character","test","slice","$517cf85470006f06$var$preserveConsecutiveUppercase","input","lastIndex","replaceAll","match","$517cf85470006f06$var$postProcess","pattern","offset","includes","charAt","_","identifier","$c1ea9419276ef279$export$85fc379452d91af0","$c1ea9419276ef279$export$c8d1057e3f32bd34","$c1ea9419276ef279$exports","grid","document","createElement","className","body","appendChild","addEventListener","event","ctrlKey","code","classList","toggle","grid_visible","console","log","options","Array","isArray","TypeError","pascalCase","map","x","trim","filter","join","locale","toLocaleLowerCase","toLocaleUpperCase","replace"],"version":3,"file":"index.e1bb3cb6.js.map"}